apiVersion: v1
kind: Pod
metadata:
  name: posts
spec:
  containers:
    - name: posts
      image: microservices/posts
      imagePullPolicy: IfNotPresent
  #     image: matheusbalduino/posts:0.0.1  
  # imagePullSecrets:
  #   - name: docker-hub

# START MINIKUBE - minikube start
# first need to call local image with the command 
# minikube image load imagename <microservices/posts:latest> if didn't work go with below commands.
# to make minikube read local images, first needs to set alpine:latest to be able read localhost images
# so run the command: 
# minikube cache add alpine:latest
# minikube cache reload
# to verify: minikube cache list

# to visualize minikube run
# minikube dashboard



# minikube start
# kubectl get pods
# kubectl exec -it [pode_name] [cmd]
# kubectl logs [pod_name]
# kubectl delete pode [pod_name]
# kubectl apply -f [config file name]
# kubectl describe pod [pod_name] 
# alias - code ~/.zshrc
# kubectl = k
# criar uma autenticação para acessar o docker online e buscar o diretório do doker.io com criação do secret docker-hub
# kubectl create secret docker-registry docker-hub  --docker-username=matheusbalduino --docker-password=Rc58/eCYvyc7u9g --docker-server=docker.io
# criar a imagem local como nome da tag do docker.io
# exemplo repositório online matheusbalduino/posts usar a tag no final matheusbalduino/posts:0.0.1
# to build the application execute: docker build . or docker build -t matheusbalduino/posts:0.0.1 .
# este comando irá criar a imagem local com este nome e depois será usado para enviar ao hub.docker.com
# docker push matheusbalduino/posts:tagname
# docker push matheusbalduino/posts:0.0.1